Часть 1. Многопоточность

Вам нужно реализовать многопоточное приложение на языке Java 8.
Условия:
    - в приложение должно быть реализовано два потока:
первый поток считывает введённые с клавиатуры числительные на английском языке
(от one до nine thousand nine hundred ninety nine) и помещает их в память,
второй поток обращается к памяти один раз в пять секунд, извлекает (удаляет его из
памяти) самое маленькое из записанных чисел и выводит его на экран;
    - задачу запрещается решать с помощью потокобезопасных коллекций как из стандартного пакета,
так и от сторонних разработчиков .


my thoughts:

- консольное приложение
- входные данные: числительные на английском
- ограничения:
    - от one до nine thousand nine hundred ninety nine (единицы, десятки, сотни, тысячи)
    - должны преобразовываться к логическому числу от 1 до 9999
    - должен соблюдаться логический порядок следования числительных (тысячи, затем сотни, десятки и единицы)
- проверка пользовательского ввода отдельным слоем
    - возможно использовать регулярные выражения (только не превратить одну проблему в две!)
- перевод словесного описания числительных в цифровое - отдельным слоем (знаем, что данные валидны, не размазываем проверку по коду)
- вывод сообщения о некорректных входных данных
- необходимо сравнивать числительные - создадим для них отдельный класс, реализует интерфейс Comparable (по цифровому значению)
- полученные объекты будем сохраныть в "память" (место конфликта двух потоков)
- структура данных для "памяти": т.к. возможны дупликаты, Set отпадает,  Map тоже, т.к. нет необходимости добавлять сущность ключ.
остается List. будем использовать LinkedList, т.к. основные действия будут:
добавление элемента (константное время), сортировка (Collections.sort()), удаление элемента(константное время)

